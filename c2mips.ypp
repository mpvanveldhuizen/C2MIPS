/* Matt Van Veldhuizen
   3/21/15
   c2mips.ypp
   CS 631
   Project
   C to MIPS assembly compiler
*/
%{
#include <stdio.h>
#include <stdlib.h>
#include "func.h"
int yylex();
%}
%union {
	struct ast *a;
	int i;
	struct symbol *s;
	struct symlist *sl;
	int fn;
}
/* declare tokens */
%token <i> INT
%token <a> NINT
%token <s> NAME
%token IF ELSE WHILE FOR
%nonassoc <fn> CMP SRT SLT
%right '=' '~' PEQ MEQ TEQ DEQ LSEQ RSEQ AEQ XEQ OEQ RETURN
%left '+' '-' '*' '/' '|' '&' '^'  '%' INC DEC LAND LOR
%type <a> exp stmt cond assign_var declare_var number explist func stmtlist varlist
%type <sl> symlist
%%

clist: /* nothing */
     | clist func { writeFile($2); }
     | clist error { }

func: NINT NAME '(' symlist ')' '{' stmtlist '}' { $$ = new_func($2, $4, $7); }
;

stmtlist: stmt stmtlist { $$ = new_ast('E', $1, $2); }
        | stmt

stmt: IF '(' cond ')' '{' stmt '}'                         { $$ = new_flow('I', $3, $6, NULL);}
    | IF '(' cond ')' '{' stmt '}' ELSE '{' stmt '}'       { $$ = new_flow('I', $3, $6, $10); }
    | WHILE '(' cond ')' '{' stmt '}'                      { $$ = new_flow('W', $3, $6, NULL); }
    | FOR '(' assign_var ';' cond ';' exp ')' '{' stmt '}' { $$ = new_for('F', $3, $5, $7, $10); }
    | RETURN explist		                           { $$ = new_ast('B', $2, $2); }
    | explist
;

cond: exp CMP exp { $$ = new_cmp($2, $1, $3); }
;

explist: exp ';' explist { $$ = new_ast('E', $1, $3); }
       | exp ';'
;

exp: exp SRT exp          { $$ = new_ast('R', $1, $3); }
   | exp SLT exp          { $$ = new_ast('L', $1, $3); }
   | exp '+' exp          { $$ = new_ast('+', $1, $3); }
   | exp '-' exp          { $$ = new_ast('-', $1, $3); }
   | exp '*' exp          { $$ = new_ast('*', $1, $3); }
   | exp '/' exp          { $$ = new_ast('/', $1, $3); }
   | exp '%' exp	  { $$ = new_ast('%', $1, $3); }
   | exp '|' exp	  { $$ = new_ast('|', $1, $3); }
   | exp '&' exp	  { $$ = new_ast('&', $1, $3); }
   | exp '^' exp	  { $$ = new_ast('^', $1, $3); }
   | '~' exp		  { $$ = new_ast('~', $2, $2); }
   | '(' exp ')'	  { $$ = $2; }
   | INC exp		  { $$ = new_incdec('C', $2); }
   | DEC exp		  { $$ = new_incdec('D', $2); }
   | exp PEQ exp	  { $$ = new_ast(7, $1, $3); }
   | exp MEQ exp	  { $$ = new_ast(8, $1, $3); }
   | exp TEQ exp	  { $$ = new_ast(9, $1, $3); }
   | exp DEQ exp	  { $$ = new_ast(10, $1, $3); }
   | exp LSEQ exp	  { $$ = new_ast(11, $1, $3); }
   | exp RSEQ exp	  { $$ = new_ast(12, $1, $3); }
   | exp AEQ exp	  { $$ = new_ast(13, $1, $3); }
   | exp XEQ exp	  { $$ = new_ast(14, $1, $3); }
   | exp OEQ exp	  { $$ = new_ast(15, $1, $3); }
   | NAME		  { $$ = see_ref($1);}
   | NAME '(' varlist ')' { $$ = new_call($1, $3); }
   | number
   | declare_var
   | assign_var
;

varlist: exp ',' varlist { $$ = new_ast('E', $1, $3); }
       | exp
       |                 { $$ = NULL; }
;

assign_var: NAME '=' exp { $$ = new_equal($1, $3); }
;

declare_var: NINT NAME		{ $$ = new_ref($2);}
           | NINT NAME '=' exp	{ $$ = new_asgn($2, $4); }
;

number: INT { $$ = new_num($1); }
;

symlist: NINT NAME             { $$ = new_symlist($2, NULL); }
       | symlist ',' NINT NAME { $$ = new_symlist($4, $1); }
       |                       { $$ = NULL; }
;
%%
int main(int argc, char **argv) {
	/* handles file input if no file is given defaults to stdin */
	initRegs();
	extern FILE *yyin;
	for(int i = 1; i < argc; i++) {
		if(i + 1 != argc) {
			if(string(argv[i]) == "-o") {
				filename = argv[i+1];
				i+=2;
			}
			else {
				if(!(yyin = fopen(argv[i], "r"))) {
					yyerror(argv[i]);
					return (1);
				}
			}
		}
		else {
			if(!(yyin = fopen(argv[i], "r"))) {
				yyerror(argv[i]);
				return (1);
			}
		}
	}
	yyparse();
}